#!/usr/bin/env python3
"""This crops the intensity visualization (generated by intensity_visualization.py) into every single frame"""
import os
from typing import Callable
from .intensity_visualization import CELL_SIZE
from PIL import Image


# Util func to concat images horizontally
def concat(imgs, concat_func: Callable):
    num_imgs = len(imgs)
    im = imgs[0]
    for idx in range(num_imgs - 1):
        im = concat_func(im, imgs[idx + 1])
    return im


def get_concat_h(im1, im2):
    dst = Image.new('RGB', (im1.width + im2.width, im1.height))
    dst.paste(im1, (0, 0))
    dst.paste(im2, (im1.width, 0))
    return dst


# Util func to concat images horizontally
def get_concat_v(im1, im2):
    dst = Image.new('RGB', (im1.width, im1.height + im2.height))
    dst.paste(im1, (0, 0))
    dst.paste(im2, (0, im1.height))
    return dst


def main(fpath, outdir):
    # Input image size: 768 × 384
    # each cell is: 128 x 128
    # table: 3 x 5
    # Importing Image class from PIL module

    # Opens a image in RGB mode
    img = Image.open(fpath)
    width, height = img.size
    print('input size:', width, height)

    # Crop every single cell
    cell_width = cell_height = CELL_SIZE
    for row in range(3):
        for column in range(5):
            left = column * cell_width
            top = row * cell_height
            right = (column + 1) * cell_width
            bottom = (row + 1) * cell_height

            cropped = img.crop((left, top, right, bottom))
            cropped.save(os.path.join(outdir, f'img-{row:02d}-{column:02d}.png'))

    # Crop each row
    for row in range(3):
        left = 0
        top = row * cell_height
        right = width
        bottom = (row + 1) * cell_height

        cropped = img.crop((left, top, right, bottom))
        cropped.save(os.path.join(outdir, f'img-row-{row:02d}.png'))

    # Crop three for each row and make it a row
    row_imgs = []
    for row in range(3):
        _row_imgs = []
        for column in [0, 3, 5]:
            left = column * cell_width
            top = row * cell_height
            right = (column + 1) * cell_width
            bottom = (row + 1) * cell_height

            _row_imgs.append(img.crop((left, top, right, bottom)))
        row_imgs.append(concat(_row_imgs, get_concat_h))
    compact_img = concat(row_imgs, get_concat_v)
    compact_img.save(os.path.join(outdir, f'img-row-compact.png'))

    # Crop the compact version into rows
    for row in range(3):
        left = 0
        top = row * cell_height
        right = cell_width * 3
        bottom = (row + 1) * cell_height

        compact_img_cropped = compact_img.crop((left, top, right, bottom))
        compact_img_cropped.save(os.path.join(outdir, f'img-compact-row-{row:02d}.png'))

if __name__ == '__main__':
    import argparse

    parser = argparse.ArgumentParser()
    parser.add_argument("filepath", type=str)
    parser.add_argument("outdir", type=str)
    args = parser.parse_args()

    if not os.path.isdir(args.outdir):
        os.mkdir(args.outdir)

    main(args.filepath, args.outdir)
